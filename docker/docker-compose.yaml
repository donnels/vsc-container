services:
  # CoreDNS server for complete bidirectional DNS resolution
  locator-matrix:
    build:
      context: ./docker-locator-matrix
      dockerfile: Dockerfile
    environment:
      - CERT_DOMAIN=${CERT_DOMAIN}
      - CERT_NAME=${WARPBUBBLE_NAME_LOCATOR_MATRIX}.${CERT_DOMAIN}
      - BASE_DOMAIN=${BASE_DOMAIN}
      - WARPBUBBLE_SERVICES=${WARPBUBBLE_SERVICES}
      # Pass all IP variables for hosts file generation
      - WARPBUBBLE_IP_LOCATOR_MATRIX=${WARPBUBBLE_IP_LOCATOR_MATRIX}
      - WARPBUBBLE_IP_DIAGNOSTIC_ARRAY=${WARPBUBBLE_IP_DIAGNOSTIC_ARRAY}
      - WARPBUBBLE_IP_ENGINEERING_CONSOLE=${WARPBUBBLE_IP_ENGINEERING_CONSOLE}
      - WARPBUBBLE_IP_DEFLECTOR=${WARPBUBBLE_IP_DEFLECTOR}
      - WARPBUBBLE_IP_SHUTTLEBAY=${WARPBUBBLE_IP_SHUTTLEBAY}
      - WARPBUBBLE_IP_TRANSPORTER=${WARPBUBBLE_IP_TRANSPORTER}
      - WARPBUBBLE_IP_TRANSPORTER_TEST=${WARPBUBBLE_IP_TRANSPORTER_TEST}
      - WARPBUBBLE_IP_CONSOLE=${WARPBUBBLE_IP_CONSOLE}
      - WARPBUBBLE_IP_OPTICAL_DATA_NETWORK=${WARPBUBBLE_IP_OPTICAL_DATA_NETWORK}
    volumes:
      - locator-matrix-data:/data
    restart: unless-stopped
    networks:
      warpbubble:
        ipv4_address: ${WARPBUBBLE_IP_LOCATOR_MATRIX}
        aliases:
          - locator-matrix.${CERT_DOMAIN}
          - dns.${CERT_DOMAIN}

  # DNS Diagnostic Array - Star Trek themed testing container
  diagnostic-array:
    build:
      context: ./docker-diagnostic-array
      dockerfile: Dockerfile
    environment:
      - CERT_DOMAIN=${CERT_DOMAIN}
      - CERT_NAME=${WARPBUBBLE_NAME_DIAGNOSTIC_ARRAY}.${CERT_DOMAIN}
    dns:
      - ${WARPBUBBLE_IP_LOCATOR_MATRIX}
    dns_search:
      - ${CERT_DOMAIN}
    networks:
      warpbubble:
        ipv4_address: ${WARPBUBBLE_IP_DIAGNOSTIC_ARRAY}
        aliases:
          - diagnostic-array.${CERT_DOMAIN}
    command: ["sleep", "infinity"]  # Keep container running for manual testing
    depends_on:
      - deflector
      - locator-matrix

  engineering-console:
    build:
      context: ./docker-engineering-console
      dockerfile: Dockerfile
    environment:
      - CERT_DOMAIN=${CERT_DOMAIN}
      - CERT_NAME=${WARPBUBBLE_NAME_ENGINEERING_CONSOLE}.${CERT_DOMAIN}
      - PASSWORD=${PASSWORD}
      - CODE_SERVER_PASSWORD_HASH=${CODE_SERVER_PASSWORD_HASH}
      - CODE_SERVER_AUTH_MESSAGE=${CODE_SERVER_AUTH_MESSAGE}
    volumes:
      - engineering-console-config:/home/coder/.config/code-server
      - engineering-console-data:/home/coder/.local/share/code-server
      - engineering-console-code:/home/coder/code
      - cert-output:/etc/letsencrypt:ro
    # Command moved to Dockerfile for maintainability
    restart: unless-stopped
    dns:
      - ${WARPBUBBLE_IP_LOCATOR_MATRIX}
    dns_search:
      - ${CERT_DOMAIN}
    networks:
      warpbubble:
        ipv4_address: ${WARPBUBBLE_IP_ENGINEERING_CONSOLE}
        aliases:
          - engineering-console.${CERT_DOMAIN}
          - vscode.${CERT_DOMAIN}
    depends_on:
      - deflector
      - locator-matrix

  deflector:
    build:
      context: ./docker-deflector
      dockerfile: Dockerfile
    environment:
      - CERT_DOMAIN=${CERT_DOMAIN}
      - DOMAIN=${DOMAIN}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - WARPBUBBLE_SERVICES=${WARPBUBBLE_SERVICES}
    volumes:
      - cert-output:/etc/letsencrypt
    dns:
      - ${WARPBUBBLE_IP_LOCATOR_MATRIX}
    dns_search:
      - ${CERT_DOMAIN}
    networks:
      warpbubble:
        ipv4_address: ${WARPBUBBLE_IP_DEFLECTOR}
        aliases:
          - deflector.${CERT_DOMAIN}

  # Nginx web server - serves landing page and HTTPS menu
  shuttlebay:
    build:
      context: ./docker-shuttlebay
      dockerfile: Dockerfile
    environment:
      - CERT_DOMAIN=${CERT_DOMAIN}
      - FQDN=${WARPBUBBLE_NAME_SHUTTLEBAY}.${CERT_DOMAIN}
    ports:
      - "${WARPBUBBLE_PORT_SHUTTLEBAY}:80"   # Landing page (exposed)
    volumes:
      - cert-output:/etc/letsencrypt:ro
    restart: unless-stopped
    dns:
      - ${WARPBUBBLE_IP_LOCATOR_MATRIX}
    dns_search:
      - ${CERT_DOMAIN}
    networks:
      warpbubble:
        ipv4_address: ${WARPBUBBLE_IP_SHUTTLEBAY}
        aliases:
          - shuttlebay.${CERT_DOMAIN}
    depends_on:
      - deflector
      - locator-matrix

  # Squid 6 forward proxy for HTTPS tunneling
  transporter:
    build:
      context: ./docker-transporter
      dockerfile: Dockerfile
    environment:
      - CERT_DOMAIN=${CERT_DOMAIN}
      - FQDN=${WARPBUBBLE_NAME_TRANSPORTER}.${CERT_DOMAIN}
      - DNS_SERVER=${WARPBUBBLE_IP_LOCATOR_MATRIX}
    ports:
      - "${WARPBUBBLE_PORT_TRANSPORTER}:3128"  # Forward proxy port (squid default is 3128)
    volumes:
      - transporter-cache:/var/spool/squid
      - transporter-logs:/var/log/squid
    depends_on:
      - deflector
      - locator-matrix
      - shuttlebay
      - engineering-console
    restart: unless-stopped
    dns:
      - ${WARPBUBBLE_IP_LOCATOR_MATRIX}
    dns_search:
      - ${CERT_DOMAIN}
    networks:
      warpbubble:
        ipv4_address: ${WARPBUBBLE_IP_TRANSPORTER}
        aliases:
          - transporter.${CERT_DOMAIN}

  # LCARS Console - Pure nginx web server with Star Trek themed interface
  console:
    build:
      context: ./docker-console
      dockerfile: Dockerfile
    environment:
      - CERT_DOMAIN=${CERT_DOMAIN}
      - FQDN=${WARPBUBBLE_NAME_CONSOLE}.${CERT_DOMAIN}
    volumes:
      - cert-output:/etc/letsencrypt:ro
    restart: unless-stopped
    dns:
      - ${WARPBUBBLE_IP_LOCATOR_MATRIX}
    dns_search:
      - ${CERT_DOMAIN}
    networks:
      warpbubble:
        ipv4_address: ${WARPBUBBLE_IP_CONSOLE}
        aliases:
          - console.${CERT_DOMAIN}
    depends_on:
      - deflector
      - locator-matrix

  # MQTT Message Bus - Optical Data Network for secure system communication
  optical-data-network:
    build:
      context: ./docker-optical-data-network
      dockerfile: Dockerfile
    environment:
      - CERT_DOMAIN=${CERT_DOMAIN}
      - FQDN=${WARPBUBBLE_NAME_OPTICAL_DATA_NETWORK}.${CERT_DOMAIN}
    volumes:
      - optical-data-network-data:/mosquitto/data
      - optical-data-network-logs:/mosquitto/log
      - cert-output:/etc/letsencrypt:ro
    restart: unless-stopped
    dns:
      - ${WARPBUBBLE_IP_LOCATOR_MATRIX}
    dns_search:
      - ${CERT_DOMAIN}
    networks:
      warpbubble:
        ipv4_address: ${WARPBUBBLE_IP_OPTICAL_DATA_NETWORK}
        aliases:
          - optical-data-network.${CERT_DOMAIN}
          - odn.${CERT_DOMAIN}
    depends_on:
      - deflector
      - locator-matrix

volumes:
  locator-matrix-data:
  engineering-console-config:
  engineering-console-data:
  engineering-console-code:
  cert-output:
  transporter-cache:
  transporter-logs:
  optical-data-network-config:
  optical-data-network-data:
  optical-data-network-logs:

networks:
  warpbubble:
    driver: bridge
    ipam:
      config:
        - subnet: ${WARPBUBBLE_NETWORK_SUBNET}
