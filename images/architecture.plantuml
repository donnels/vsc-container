@startuml
title Architecture overview
footer (C)2025 Sean Donnellan

actor user
participant headset
participant router
box SteamDeck #aaf-fff
    participant "HA-proxy fwd proxy" as steamdeck.haproxy <<container>>
    participant "nginx web server" as steamdeck.nginx <<container>>
    participant "DNS" as steamdeck.dns <<container>>
    participant "certbot" as steamdeck.certbot <<container>>
    participant "vsc" as steamdeck.vsc <<container>>
end box

group initialization
    user -> headset: activate headset
    headset -> router: connect to Wi-Fi
    headset -> steamdeck.nginx: http :8080 - request landing page
    note right
        nginx serves proxy configuration page
        exposed on steamdeck port 8080
    end note
    headset <- steamdeck.nginx: provide proxy details (proxy: steamdeck.fritz.box:8443)
    user -> headset: configure proxy settings
end group

group initial test tunnel to website with Let's Encrypt cert and menu
    note over headset
        User clicks LCARS link from the landing page
    end note
    headset -> steamdeck.haproxy: CONNECT www.vsagcrd.org:443
    note right
        HA-proxy is a FORWARD proxy
        The client headset is requesting an Internal steamdeck website as an initial test
        the page will provide a link to the VSCode container
        the internal nginx HAS a Let's Encrypt cert
    end note
    steamdeck.haproxy -> steamdeck.dns: resolve www.vsagcrd.org
    note right
        the DNS is used the first time then cached results are used
    end note
    steamdeck.haproxy <- steamdeck.dns: A record
    steamdeck.haproxy -> steamdeck.nginx: TCP connect :443
    steamdeck.haproxy <- steamdeck.nginx: TCP connection established
    headset <- steamdeck.haproxy: HTTP 200 Connection established
    note right
        HAProxy establishes TCP tunnel
        All subsequent traffic is passed through transparently
    end note
    headset -> steamdeck.haproxy: [TLS handshake data]
    steamdeck.haproxy -> steamdeck.nginx: [TLS handshake data]
    steamdeck.haproxy <- steamdeck.nginx: [TLS handshake data]
    headset <- steamdeck.haproxy: [TLS handshake data]
    note right
        TLS session is end-to-end between headset and nginx
        HAProxy only forwards encrypted data
    end note
    note across headset,steamdeck.nginx
        tunnel
    end note
    headset <-> steamdeck.nginx:encrypted HTTPS session (via HAProxy tunnel)
end group

group access VSCode container
    note over headset
        User clicks VSCode link from the LCARS page
    end note
    headset -> steamdeck.haproxy: CONNECT vsc.vsagcrd.org:443
    note right
        HAProxy forward proxy for VSCode container
        Different hostname for VSCode service
    end note
    steamdeck.haproxy -> steamdeck.dns: resolve vsc.vsagcrd.org
    note right
        DNS resolves to VSCode container IP
    end note
    steamdeck.haproxy <- steamdeck.dns: A record
    steamdeck.haproxy -> steamdeck.vsc: TCP connect :443
    steamdeck.haproxy <- steamdeck.vsc: TCP connection established
    headset <- steamdeck.haproxy: HTTP 200 Connection established
    note right
        HAProxy establishes TCP tunnel to VSCode
    end note
        headset -> steamdeck.haproxy: [TLS handshake data]
    steamdeck.haproxy -> steamdeck.vsc: [TLS handshake data]
    steamdeck.haproxy <- steamdeck.vsc: [TLS handshake data]
    headset <- steamdeck.haproxy: [TLS handshake data]
    note right
        TLS session is end-to-end between headset and VSCode
        VSCode container has its own Let's Encrypt cert
    end note
    note across headset,steamdeck.vsc
        tunnel
    end note
    headset <-> steamdeck.vsc: encrypted HTTPS session (via HAProxy tunnel)
    note right
        VSCode web interface accessible
        Full development environment in browser
    end note
end group

@enduml