@startuml
title Architecture overview
footer (C)2025 Sean Donnellan

actor user
participant headset
participant router
box SteamDeck #aaf-fff
    participant "HA-proxy fwd proxy" as steamdeck.haproxy <<container>>
    participant "nginx web server" as steamdeck.nginx <<container>>
    participant "DNS" as steamdeck.dns <<container>>
    participant "certbot" as steamdeck.certbot <<container>>
    participant "vsc" as steamdeck.vsc <<container>>
end box

group initialization
    user -> headset: activate headset
    headset -> router: connect to Wi-Fi
    headset -> steamdeck.nginx: http :8080 - request landing page
    note right
        nginx serves proxy configuration page
        exposed on steamdeck port 8080
    end note
    headset <- steamdeck.nginx: provide proxy details (proxy: steamdeck.fritz.box:8443)
    user -> headset: configure proxy settings
end group

@startuml warp-bubble-architecture
title Warp Bubble Architecture - Star Trek Themed Development Environment
footer (C)2025 Sean Donnellan

actor user
participant headset
participant router
box SteamDeck #aaf-fff
    participant "TRANSPORTER
(Squid forward proxy)" as steamdeck.transporter <<container>>
    participant "SHUTTLEBAY
(nginx landing page)" as steamdeck.shuttlebay <<container>>
    participant "LOCATOR-MATRIX
(CoreDNS)" as steamdeck.locator <<container>>
    participant "DEFLECTOR
(certbot)" as steamdeck.deflector <<container>>
    participant "ENGINEERING CONSOLE
(VS Code)" as steamdeck.engineering <<container>>
    participant "CONSOLE
(LCARS interface)" as steamdeck.console <<container>>
    participant "OPTICAL DATA NETWORK
(MQTT)" as steamdeck.odn <<container>>
end box

group initialization
    user -> headset: activate headset
    headset -> router: connect to Wi-Fi
    user -> headset: configure proxy settings
end group

group initial test tunnel to website with Let's Encrypt cert and menu
    note over steamdeck.shuttlebay
        SHUTTLEBAY serves proxy configuration page
    end note
    headset <-> steamdeck.shuttlebay: HTTP landing page
    headset <- steamdeck.shuttlebay: provide proxy details (proxy: steamdeck.fritz.box:3128)
    user -> headset: configure proxy settings
end group

group access VSCode container via forward proxy
    note over steamdeck.transporter
        TRANSPORTER is a FORWARD proxy
        (not reverse proxy)
        Squid-based HTTPS tunneling
    end note
    
    headset -> steamdeck.transporter: CONNECT engineering-console.warp.vsagcrd.org:8443
    
    note over steamdeck.transporter, steamdeck.locator
        Forward proxy looks up internal DNS
    end note
    
    steamdeck.transporter -> steamdeck.locator: resolve engineering-console.warp.vsagcrd.org
    note over steamdeck.locator
        LOCATOR-MATRIX provides internal DNS
        for *.warp.vsagcrd.org domains
    end note
    steamdeck.transporter <- steamdeck.locator: A record
    steamdeck.transporter -> steamdeck.engineering: TCP connect :8443
    steamdeck.transporter <- steamdeck.engineering: TCP connection established
    headset <- steamdeck.transporter: HTTP 200 Connection established
    
    note over steamdeck.transporter
        Transporter establishes TCP tunnel
    end note
    
    headset -> steamdeck.transporter: [TLS handshake data]
    steamdeck.transporter -> steamdeck.engineering: [TLS handshake data]
    steamdeck.transporter <- steamdeck.engineering: [TLS handshake data]
    headset <- steamdeck.transporter: [TLS handshake data]
    
    note over steamdeck.transporter
        Transporter only forwards encrypted data
        Let's Encrypt certificates handled by VS Code
    end note
    
    headset <-> steamdeck.engineering: encrypted HTTPS session (via Transporter tunnel)
    note over steamdeck.engineering
        ENGINEERING CONSOLE runs VS Code
        with Let's Encrypt certificates
    end note
end group

group LCARS console access
    headset <-> steamdeck.console: HTTP LCARS interface
    note over steamdeck.console
        CONSOLE provides Star Trek themed
        operations interface for VR headsets
    end note
end group

group certificate distribution via optical data network
    steamdeck.deflector -> steamdeck.odn: publish certificate updates
    steamdeck.odn -> steamdeck.engineering: distribute new certificates
    steamdeck.odn -> steamdeck.shuttlebay: distribute new certificates
    note over steamdeck.odn
        OPTICAL DATA NETWORK uses MQTT
        for secure inter-service communication
    end note
end group

@enduml
end group

group access VSCode container
    note over headset
        User clicks VSCode link from the LCARS page
    end note
    headset -> steamdeck.haproxy: CONNECT vsc-lcars.vsagcrd.org:443
    note right
        HAProxy forward proxy for VSCode container
        Different hostname for VSCode service
    end note
    steamdeck.haproxy -> steamdeck.dns: resolve vsc-lcars.vsagcrd.org
    note right
        DNS resolves to VSCode container IP
    end note
    steamdeck.haproxy <- steamdeck.dns: A record
    steamdeck.haproxy -> steamdeck.vsc: TCP connect :443
    steamdeck.haproxy <- steamdeck.vsc: TCP connection established
    headset <- steamdeck.haproxy: HTTP 200 Connection established
    note right
        HAProxy establishes TCP tunnel to VSCode
    end note
        headset -> steamdeck.haproxy: [TLS handshake data]
    steamdeck.haproxy -> steamdeck.vsc: [TLS handshake data]
    steamdeck.haproxy <- steamdeck.vsc: [TLS handshake data]
    headset <- steamdeck.haproxy: [TLS handshake data]
    note right
        TLS session is end-to-end between headset and VSCode
        VSCode container has its own Let's Encrypt cert
    end note
    note across headset,steamdeck.vsc
        tunnel
    end note
    headset <-> steamdeck.vsc: encrypted HTTPS session (via HAProxy tunnel)
    note right
        VSCode web interface accessible
        Full development environment in browser
    end note
end group

@enduml