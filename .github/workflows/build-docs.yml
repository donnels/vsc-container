name: Build Documentation and Diagrams

on:
  push:
    branches: [ main, develop ]
    paths: 
      - '**.asciidoc'
      - '**.plantuml'
      - 'images/**'
      - 'docs/**'
      - '.github/workflows/build-docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**.asciidoc'
      - '**.plantuml'
      - 'images/**'
      - 'docs/**'
      - '.github/workflows/build-docs.yml'

permissions:
  contents: write

jobs:
  build-docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Java for PlantUML
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Install AsciiDoctor and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y asciidoctor graphviz pandoc
        sudo gem install asciidoctor-pdf
        wget -O plantuml.jar https://github.com/plantuml/plantuml/releases/download/v1.2024.0/plantuml-1.2024.0.jar
        sudo cp plantuml.jar /usr/local/bin/
    
    - name: Ensure docs directory exists
      run: mkdir -p docs
    
    - name: Build PlantUML files to PNG
      run: |
        find . -name "*.plantuml" -type f | while read file; do
          echo "Processing: $file"
          dir=$(dirname "$file")
          filename=$(basename "$file" .plantuml)
          
          # Generate PNG
          java -jar /usr/local/bin/plantuml.jar -tpng "$file"
          
          # Handle nested directory creation by PlantUML
          nested_png="$dir/$dir/$filename.png"
          target_png="$dir/$filename.png"
          
          if [ -f "$nested_png" ]; then
            mv "$nested_png" "$target_png"
            rmdir "$dir/$dir" 2>/dev/null || true
          fi
        done
    
    - name: Build AsciiDoc files to HTML
      run: |
        find . -name "*.asciidoc" -not -path "./docs/*" | while read file; do
          echo "Processing $file to HTML"
          filename=$(basename "$file" .asciidoc)
          asciidoctor "$file" -o "docs/${filename}.html"
        done
    
    - name: Build AsciiDoc files to PDF
      run: |
        find . -name "*.asciidoc" -not -path "./docs/*" | while read file; do
          echo "Processing $file to PDF"
          filename=$(basename "$file" .asciidoc)
          asciidoctor-pdf "$file" -o "docs/${filename}.pdf"
        done
    
    - name: Build AsciiDoc files to DOCX
      run: |
        find . -name "*.asciidoc" -not -path "./docs/*" | while read file; do
          echo "Processing $file to DOCX"
          filename=$(basename "$file" .asciidoc)
            pandoc "$file" -f asciidoc -t docx -o "docs/${filename}.docx"
        done
    
    - name: List generated files
      run: |
        echo "Generated files:"
        echo "HTML: $(ls docs/*.html 2>/dev/null | wc -l) files"
        echo "PDF: $(ls docs/*.pdf 2>/dev/null | wc -l) files"  
        echo "DOCX: $(ls docs/*.docx 2>/dev/null | wc -l) files"
        echo "PNG: $(find . -name '*.png' -type f 2>/dev/null | wc -l) files"
    
    - name: Commit and push generated files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        # Add generated documentation files
        git add docs/
        # Add PNG files if they exist
        if find . -name "*.png" -type f | grep -q .; then
          find . -name "*.png" -type f -exec git add {} \;
        fi
        # Check if there are any changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-generated documentation and diagrams [skip ci]"
          git push
        fi
